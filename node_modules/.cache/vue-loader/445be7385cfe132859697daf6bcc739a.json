{"remainingRequest":"/Users/chris/Desktop/thingexplainerchat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chris/Desktop/thingexplainerchat/src/components/simpleChat/ChatInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chris/Desktop/thingexplainerchat/src/components/simpleChat/ChatInput.vue","mtime":1559300643835},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport fromWords from '../../assets/words.js';\n\nexport default {\n    data() {\n        return {\n            text: \"\",\n            valid: true,\n            simpleWords: {},\n            invalidWordList: \"\",\n            invalidWords: {},\n            showInvalid: false,\n            timeout: null\n        }\n    },\n    created: function () {\n        let temp = fromWords.words.split('|');\n        temp.forEach(word => {\n            this.simpleWords[`${word}`] = true;\n        });\n        this.timeout = setTimeout(() => {}, 0);\n    },\n    methods: {\n\n        // Make sure the input is proper\n        validateInput: function(e) {\n            // handle if we're submitting\n            if (e.key == \"Enter\") {\n                e.preventDefault();\n                if (this.valid) {\n                    this.submitText(this.text);\n                    this.text = \"\";\n                } else {\n                    let box = document.querySelector(\".simpleInput\");\n                    box.classList.add(\"badInput\");\n                    setTimeout(() => {\n                        box.classList.remove(\"badInput\");\n                    }, 400);\n                }\n            }\n\n            //G et the input and process it\n            let simpleInput = this.text.split(\" \");\n            this.valid = true;\n            this.showInvalid = false;\n            this.invalidWords = {};\n            clearTimeout(this.timeout);\n            simpleInput.forEach(word => {\n                let strippedWord = word.replace(/[.,/#!?$%^&*;:{}=\\-_`~()]/g,\"\");\n                if (this.simpleWords[`${strippedWord.toLowerCase()}`] == true) {\n                    // do nothing... this just works here.\n                } else if (strippedWord != \"\") {\n                    this.valid = false;\n                    this.invalidWords[`${strippedWord}`] = true;\n                }\n                if (this.invalidWords && Object.keys(this.invalidWords).length > 0) {\n                    this.valid = false;\n                    this.timeout = setTimeout(() => {\n                        this.showInvalid = true;\n                        this.setInvalidWords(Object.keys(this.invalidWords));\n                    }, 400);\n                }\n            })\n        },\n        // Gathers the words together that are failures\n        setInvalidWords: function(words) {\n            this.invalidWordList = \"\";\n            for (let i = 0; i < words.length - 1; i++) {\n                this.invalidWordList += words[i] + \", \";\n            }\n            this.invalidWordList += words[words.length - 1];\n        },\n        // Send the text to the chat body.\n        submitText: function(text) {\n            this.$emit('submitMessage', text);\n        }\n        \n    }\n}\n",{"version":3,"sources":["ChatInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"ChatInput.vue","sourceRoot":"src/components/simpleChat","sourcesContent":["<template>\n    <div class=\"chatInputWrap\">\n        <input\n            class=\"simpleInput\" \n            type=\"text\"\n            v-model=\"text\"\n            @keyup=\"validateInput\">\n        <br>\n        <p \n            v-if=\"showInvalid && invalidWordList\"\n            class=\"invalidWords\">\n            Invalid Words: {{invalidWordList}}</p>\n    </div>\n</template>\n\n<script>\nimport fromWords from '../../assets/words.js';\n\nexport default {\n    data() {\n        return {\n            text: \"\",\n            valid: true,\n            simpleWords: {},\n            invalidWordList: \"\",\n            invalidWords: {},\n            showInvalid: false,\n            timeout: null\n        }\n    },\n    created: function () {\n        let temp = fromWords.words.split('|');\n        temp.forEach(word => {\n            this.simpleWords[`${word}`] = true;\n        });\n        this.timeout = setTimeout(() => {}, 0);\n    },\n    methods: {\n\n        // Make sure the input is proper\n        validateInput: function(e) {\n            // handle if we're submitting\n            if (e.key == \"Enter\") {\n                e.preventDefault();\n                if (this.valid) {\n                    this.submitText(this.text);\n                    this.text = \"\";\n                } else {\n                    let box = document.querySelector(\".simpleInput\");\n                    box.classList.add(\"badInput\");\n                    setTimeout(() => {\n                        box.classList.remove(\"badInput\");\n                    }, 400);\n                }\n            }\n\n            //G et the input and process it\n            let simpleInput = this.text.split(\" \");\n            this.valid = true;\n            this.showInvalid = false;\n            this.invalidWords = {};\n            clearTimeout(this.timeout);\n            simpleInput.forEach(word => {\n                let strippedWord = word.replace(/[.,/#!?$%^&*;:{}=\\-_`~()]/g,\"\");\n                if (this.simpleWords[`${strippedWord.toLowerCase()}`] == true) {\n                    // do nothing... this just works here.\n                } else if (strippedWord != \"\") {\n                    this.valid = false;\n                    this.invalidWords[`${strippedWord}`] = true;\n                }\n                if (this.invalidWords && Object.keys(this.invalidWords).length > 0) {\n                    this.valid = false;\n                    this.timeout = setTimeout(() => {\n                        this.showInvalid = true;\n                        this.setInvalidWords(Object.keys(this.invalidWords));\n                    }, 400);\n                }\n            })\n        },\n        // Gathers the words together that are failures\n        setInvalidWords: function(words) {\n            this.invalidWordList = \"\";\n            for (let i = 0; i < words.length - 1; i++) {\n                this.invalidWordList += words[i] + \", \";\n            }\n            this.invalidWordList += words[words.length - 1];\n        },\n        // Send the text to the chat body.\n        submitText: function(text) {\n            this.$emit('submitMessage', text);\n        }\n        \n    }\n}\n</script>\n\n<style>\n    textarea input {\n        border:none;\n        background-image:none;\n        background-color:transparent;\n        -webkit-box-shadow: none;\n        -moz-box-shadow: none;\n        box-shadow: none;\n        resize: none;\n    }\n    textarea:focus, input:focus{\n        outline: none;\n    }\n    .simpleInput {\n        transition: 0.2s;\n        width: 500px;\n        font-size: 20px;\n        padding: 10px;\n        border: solid #cccccc;\n        border-radius: 10px;\n    }\n    .chatInputWrap {\n        width: 500px;\n        margin: auto;\n    }\n    .badInput {\n        border: solid #a00;\n    }\n</style>"]}]}