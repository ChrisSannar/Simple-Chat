{"remainingRequest":"/Users/chris/Desktop/thingexplainerchat/node_modules/babel-loader/lib/index.js!/Users/chris/Desktop/thingexplainerchat/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chris/Desktop/thingexplainerchat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chris/Desktop/thingexplainerchat/src/components/simpleChat/Start.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chris/Desktop/thingexplainerchat/src/components/simpleChat/Start.vue","mtime":1565152725109},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      disableInput: false,\n      // Used the disable the input when starting\n      viewGoButton: true,\n      // Controls the view of the 'Go' button\n      username: \"\",\n      errorMessage: \"\",\n      // Bad words...\n      badWordList: [\"ass\", \"damn\", \"shit\", \"fuck\", \"bastard\", \"cunt\", \"hell\", \"bitch\"]\n    };\n  },\n  methods: {\n    // Checks to see if the input is ready to move on to the next stage\n    checkSimpleInput: function checkSimpleInput(e) {\n      if (e.key === \"Enter\") {\n        this.checkUsername();\n      } // Make sure that the input is alpha numeric with only dashes and underscores\n\n\n      var regex = /[A-Za-z0-9_-]/g;\n\n      if (!regex.test(e.key)) {\n        e.preventDefault();\n      }\n    },\n    checkBadWord: function checkBadWord(wurd) {\n      var word = wurd.toLowerCase();\n\n      for (var badWord in this.badWordList) {\n        if (word.indexOf(this.badWordList[badWord]) >= 0) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    // Makes sure the username is not a copy and is valid to start the app\n    checkUsername: function checkUsername(e) {\n      var _this = this;\n\n      if (this.username) {\n        if (this.checkBadWord(this.username)) {\n          this.setErrorMessage(\"Please, have some class.\");\n          return;\n        }\n\n        this.disableInput = true;\n        this.viewGoButton = false;\n        this.runLoadingSpinner(); // Send a connection request to the server\n\n        this.$axios.get('http://localhost:8080/connect').then(function () {\n          _this.viewGoButton = true;\n          _this.disableInput = false; // *** Check to see if username isn't already \n          // Starts the application if the username is good\n\n          _this.$emit(\"startChat\", _this.username);\n        }).catch(function () {\n          // if there is an error with the program then post the error message and restart\n          _this.viewGoButton = _this.disableInput = true;\n\n          _this.setErrorMessage(\"There was a problem trying to connect. Please try again later.\");\n        });\n      } else {\n        e.target.blur();\n      }\n    },\n    setErrorMessage: function setErrorMessage(msg) {\n      var _this2 = this;\n\n      this.errorMessage = msg;\n      setTimeout(function () {\n        _this2.disableInput = false;\n        _this2.errorMessage = \"\";\n      }, 4000);\n    }\n  }\n};",{"version":3,"sources":["Start.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,YAAA,EAAA,KADA;AACA;AACA,MAAA,YAAA,EAAA,IAFA;AAEA;AACA,MAAA,QAAA,EAAA,EAHA;AAIA,MAAA,YAAA,EAAA,EAJA;AAKA;AACA,MAAA,WAAA,EAAA,CAAA,KAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,SAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA;AANA,KAAA;AAQA,GAVA;AAWA,EAAA,OAAA,EAAA;AAEA;AACA,IAAA,gBAAA,EAAA,0BAAA,CAAA,EAAA;AAEA,UAAA,CAAA,CAAA,GAAA,KAAA,OAAA,EAAA;AACA,aAAA,aAAA;AACA,OAJA,CAMA;;;AACA,UAAA,KAAA,GAAA,gBAAA;;AACA,UAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA;AACA,QAAA,CAAA,CAAA,cAAA;AACA;AACA,KAdA;AAgBA,IAAA,YAAA,EAAA,sBAAA,IAAA,EAAA;AACA,UAAA,IAAA,GAAA,IAAA,CAAA,WAAA,EAAA;;AACA,WAAA,IAAA,OAAA,IAAA,KAAA,WAAA,EAAA;AACA,YAAA,IAAA,CAAA,OAAA,CAAA,KAAA,WAAA,CAAA,OAAA,CAAA,KAAA,CAAA,EAAA;AACA,iBAAA,IAAA;AACA;AACA;;AACA,aAAA,KAAA;AACA,KAxBA;AA0BA;AACA,IAAA,aAAA,EAAA,uBAAA,CAAA,EAAA;AAAA;;AACA,UAAA,KAAA,QAAA,EAAA;AAEA,YAAA,KAAA,YAAA,CAAA,KAAA,QAAA,CAAA,EAAA;AACA,eAAA,eAAA,CAAA,0BAAA;AACA;AACA;;AAEA,aAAA,YAAA,GAAA,IAAA;AACA,aAAA,YAAA,GAAA,KAAA;AAEA,aAAA,iBAAA,GAVA,CAYA;;AACA,aAAA,MAAA,CAAA,GAAA,CAAA,+BAAA,EACA,IADA,CACA,YAAA;AACA,UAAA,KAAA,CAAA,YAAA,GAAA,IAAA;AACA,UAAA,KAAA,CAAA,YAAA,GAAA,KAAA,CAFA,CAIA;AAEA;;AACA,UAAA,KAAA,CAAA,KAAA,CAAA,WAAA,EAAA,KAAA,CAAA,QAAA;AACA,SATA,EAUA,KAVA,CAUA,YAAA;AAEA;AACA,UAAA,KAAA,CAAA,YAAA,GAAA,KAAA,CAAA,YAAA,GAAA,IAAA;;AACA,UAAA,KAAA,CAAA,eAAA,CAAA,gEAAA;AACA,SAfA;AAgBA,OA7BA,MA6BA;AACA,QAAA,CAAA,CAAA,MAAA,CAAA,IAAA;AACA;AACA,KA5DA;AA8DA,IAAA,eAAA,EAAA,yBAAA,GAAA,EAAA;AAAA;;AACA,WAAA,YAAA,GAAA,GAAA;AACA,MAAA,UAAA,CAAA,YAAA;AACA,QAAA,MAAA,CAAA,YAAA,GAAA,KAAA;AACA,QAAA,MAAA,CAAA,YAAA,GAAA,EAAA;AACA,OAHA,EAGA,IAHA,CAAA;AAIA;AApEA;AAXA,CAAA","sourcesContent":["<template>\n    <div class=\"wrap\">\n        <h1>Thing Explainer Chat</h1>\n        <h3>Chatting, but with Simpler Words</h3>\n        <br/>\n        <p>Enter your (simple) username</p>\n        <div class=\"username-input\">\n          <span class=\"input-append\">@</span>\n          <input \n              class=\"simpleInput\" \n              type=\"text\" \n              maxlength=\"42\"\n              v-model=\"username\"\n              @keydown=\"checkSimpleInput\"\n              :disabled=\"disableInput\" />\n          </div>\n        <button \n            class=\"goBtn\" \n            @click=\"checkUsername\"\n            :disabled=\"disableInput\"\n            v-show=\"viewGoButton\">\n            GO\n        </button>\n        <div v-show=\"!viewGoButton\">\n          <div class=\"loader\"></div>\n          <p>You are now being paired with a random chatter</p>\n        </div>\n        <p>{{ errorMessage }}</p>\n    </div>\n</template>\n<script>\n\nexport default {\n    data() {\n        return {\n            disableInput: false,  // Used the disable the input when starting\n            viewGoButton: true,   // Controls the view of the 'Go' button\n            username: \"\",\n            errorMessage: \"\",\n            // Bad words...\n            badWordList: [\"ass\", \"damn\", \"shit\", \"fuck\", \"bastard\", \"cunt\", \"hell\", \"bitch\"],\n        }\n    },\n    methods: {\n\n        // Checks to see if the input is ready to move on to the next stage\n        checkSimpleInput: function(e) {\n        \n          if (e.key === \"Enter\") {\n              this.checkUsername();\n          }\n\n          // Make sure that the input is alpha numeric with only dashes and underscores\n          let regex = /[A-Za-z0-9_-]/g;\n          if (!regex.test(e.key)) {\n              e.preventDefault();\n          }\n        },\n\n        checkBadWord: function(wurd) {\n          let word = wurd.toLowerCase();\n          for (let badWord in this.badWordList) {\n            if (word.indexOf(this.badWordList[badWord]) >= 0) {\n              return true;\n            }\n          }\n          return false;\n        },\n\n        // Makes sure the username is not a copy and is valid to start the app\n        checkUsername: function(e) {\n          if (this.username) {\n\n            if (this.checkBadWord(this.username)) {\n              this.setErrorMessage(\"Please, have some class.\");\n              return;\n            }\n\n            this.disableInput = true;\n            this.viewGoButton = false;\n\n            this.runLoadingSpinner();\n\n            // Send a connection request to the server\n            this.$axios.get('http://localhost:8080/connect')\n              .then(() => {\n                this.viewGoButton = true;\n                this.disableInput = false;\n\n                // *** Check to see if username isn't already \n\n                // Starts the application if the username is good\n                this.$emit(\"startChat\", this.username);\n              })\n              .catch(() => {\n\n                // if there is an error with the program then post the error message and restart\n                this.viewGoButton = this.disableInput = true;\n                this.setErrorMessage(\"There was a problem trying to connect. Please try again later.\");\n              })\n            } else {\n                e.target.blur();\n            }\n        },\n\n        setErrorMessage: function(msg) {\n          this.errorMessage = msg;\n          setTimeout(() => {\n            this.disableInput = false;\n            this.errorMessage = \"\";\n          }, 4000);\n        }\n    }\n}\n</script>\n<style>\n\n.wrap {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    margin-top: 12%;\n}\n\ntextarea input {\n    border:none;\n    background-image:none;\n    background-color:transparent;\n    -webkit-box-shadow: none;\n    -moz-box-shadow: none;\n    box-shadow: none;\n    resize: none;\n}\n\ntextarea:focus, input:focus{\n    outline: none;\n}\n\n.simpleInput {\n    text-align: center;\n    transition: 0.2s;\n    width: 400px;\n    font-size: 20px;\n    padding: 10px;\n    border: solid #cccccc;\n    border-radius: 10px;\n    /* border-top-right-radius: 10px;\n    border-bottom-right-radius: 10px; */\n}\n\n.username-input {\n  display: inline;\n}\n\n.input-append {\n  background: #e3e3e3;\n  border: solid #cccccc;\n  border-top-left-radius: 10px;\n  border-bottom-left-radius: 10px;\n  width: 2em;\n  font-size: 20px;\n  padding: 10px;\n  display: none;\n}\n\n.goBtn {\n    color: white;\n    background: #42b883;\n    border: none;\n    border-radius: 3px;\n    cursor: pointer;\n    margin-top: 1em;\n    font-size: 1.3em;\n    width: 4em;\n    height: 1.5em;\n}\n\n.goBtn:active,\n.goBtn:focus,\n.goBtn:focus:active {\n  background-image: none;\n  outline: 0;\n  box-shadow: none;\n  background: #44d493;\n}\n\n.loader {\n  margin: 1em auto;\n  border: 8px solid #f3f3f3; \n  border-top: 8px solid #44d493;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  animation: spin 2s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n</style>"],"sourceRoot":"src/components/simpleChat"}]}