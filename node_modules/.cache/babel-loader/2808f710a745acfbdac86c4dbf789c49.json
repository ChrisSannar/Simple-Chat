{"remainingRequest":"/Users/chris/Desktop/thingexplainerchat/node_modules/thread-loader/dist/cjs.js!/Users/chris/Desktop/thingexplainerchat/node_modules/babel-loader/lib/index.js!/Users/chris/Desktop/thingexplainerchat/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chris/Desktop/thingexplainerchat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chris/Desktop/thingexplainerchat/src/components/simpleChat/Start.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chris/Desktop/thingexplainerchat/src/components/simpleChat/Start.vue","mtime":1569235502861},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'Start',\n  props: ['socketId', 'pairSocketId'],\n  data: function data() {\n    return {\n      disableInput: false,\n      // Used the disable the input when starting\n      viewGoButton: true,\n      // Controls the view of the 'Go' button\n      username: '',\n      errorMessage: '',\n      // socketId: this.socketId,\n      // Bad words...\n      badWordList: ['ass', 'damn', 'shit', 'fuck', 'bastard', 'cunt', 'hell', 'bitch']\n    };\n  },\n  created: function created() {// this.adjustEditorWindow();\n    // window.onresize = this.adjustEditorWindow;\n  },\n  watch: {\n    socketId: function socketId(val) {\n      this.socketId = val;\n    },\n    pairSocketId: function pairSocketId(val) {\n      this.pairSocketId = val;\n    }\n  },\n  methods: {\n    // Checks to see if the input is ready to move on to the next stage\n    checkSimpleInput: function checkSimpleInput(e) {\n      if (e.key === 'Enter') {\n        this.checkUsername();\n      } // Make sure that the input is alpha numeric with only dashes and underscores\n\n\n      var regex = /[A-Za-z0-9_-]/g;\n\n      if (!regex.test(e.key)) {\n        e.preventDefault();\n      }\n    },\n    checkBadWord: function checkBadWord(wurd) {\n      var word = wurd.toLowerCase();\n\n      for (var badWord in this.badWordList) {\n        if (word.indexOf(this.badWordList[badWord]) >= 0) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    // Makes sure the username is not a copy and is valid to start the app\n    checkUsername: function checkUsername(e) {\n      if (this.username) {\n        if (this.checkBadWord(this.username)) {\n          this.setErrorMessage('Please, have some class.');\n          return;\n        }\n\n        this.disableInput = true;\n        this.viewGoButton = false; // Send a connection request to the server\n\n        this.$socket.emit('getChatPartner', this.username);\n      } else {\n        e.target.blur();\n      }\n    },\n    setErrorMessage: function setErrorMessage(msg) {\n      var _this = this;\n\n      this.errorMessage = msg;\n      setTimeout(function () {\n        _this.disableInput = false;\n        _this.errorMessage = '';\n      }, 4000);\n    }\n  },\n  sockets: {\n    chatterFound: function chatterFound(info) {\n      this.viewGoButton = true;\n      this.disableInput = false;\n      this.pairSocketId = info[0]; // Starts the application if the username is good\n\n      this.$emit('startChat', [this.username, info[0], info[1]]);\n    }\n  }\n};",{"version":3,"sources":["Start.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,eAAA;AACA,EAAA,IAAA,EAAA,OADA;AAEA,EAAA,KAAA,EAAA,CAAA,UAAA,EAAA,cAAA,CAFA;AAGA,EAAA,IAHA,kBAGA;AACA,WAAA;AACA,MAAA,YAAA,EAAA,KADA;AACA;AACA,MAAA,YAAA,EAAA,IAFA;AAEA;AACA,MAAA,QAAA,EAAA,EAHA;AAIA,MAAA,YAAA,EAAA,EAJA;AAKA;AACA;AACA,MAAA,WAAA,EAAA,CAAA,KAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,SAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA;AAPA,KAAA;AASA,GAbA;AAcA,EAAA,OAdA,qBAcA,CAEA;AACA;AAEA,GAnBA;AAoBA,EAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA,kBAAA,GAAA,EAAA;AACA,WAAA,QAAA,GAAA,GAAA;AACA,KAHA;AAIA,IAAA,YAAA,EAAA,sBAAA,GAAA,EAAA;AACA,WAAA,YAAA,GAAA,GAAA;AACA;AANA,GApBA;AA4BA,EAAA,OAAA,EAAA;AAEA;AACA,IAAA,gBAAA,EAAA,0BAAA,CAAA,EAAA;AAEA,UAAA,CAAA,CAAA,GAAA,KAAA,OAAA,EAAA;AACA,aAAA,aAAA;AACA,OAJA,CAMA;;;AACA,UAAA,KAAA,GAAA,gBAAA;;AACA,UAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA;AACA,QAAA,CAAA,CAAA,cAAA;AACA;AACA,KAdA;AAgBA,IAAA,YAAA,EAAA,sBAAA,IAAA,EAAA;AACA,UAAA,IAAA,GAAA,IAAA,CAAA,WAAA,EAAA;;AACA,WAAA,IAAA,OAAA,IAAA,KAAA,WAAA,EAAA;AACA,YAAA,IAAA,CAAA,OAAA,CAAA,KAAA,WAAA,CAAA,OAAA,CAAA,KAAA,CAAA,EAAA;AACA,iBAAA,IAAA;AACA;AACA;;AACA,aAAA,KAAA;AACA,KAxBA;AA0BA;AACA,IAAA,aAAA,EAAA,uBAAA,CAAA,EAAA;AACA,UAAA,KAAA,QAAA,EAAA;AAEA,YAAA,KAAA,YAAA,CAAA,KAAA,QAAA,CAAA,EAAA;AACA,eAAA,eAAA,CAAA,0BAAA;AACA;AACA;;AAEA,aAAA,YAAA,GAAA,IAAA;AACA,aAAA,YAAA,GAAA,KAAA,CARA,CAUA;;AACA,aAAA,OAAA,CAAA,IAAA,CAAA,gBAAA,EAAA,KAAA,QAAA;AAEA,OAbA,MAaA;AACA,QAAA,CAAA,CAAA,MAAA,CAAA,IAAA;AACA;AACA,KA5CA;AA8CA,IAAA,eAAA,EAAA,yBAAA,GAAA,EAAA;AAAA;;AACA,WAAA,YAAA,GAAA,GAAA;AACA,MAAA,UAAA,CAAA,YAAA;AACA,QAAA,KAAA,CAAA,YAAA,GAAA,KAAA;AACA,QAAA,KAAA,CAAA,YAAA,GAAA,EAAA;AACA,OAHA,EAGA,IAHA,CAAA;AAIA;AApDA,GA5BA;AAmFA,EAAA,OAAA,EAAA;AACA,IAAA,YAAA,EAAA,sBAAA,IAAA,EAAA;AACA,WAAA,YAAA,GAAA,IAAA;AACA,WAAA,YAAA,GAAA,KAAA;AAEA,WAAA,YAAA,GAAA,IAAA,CAAA,CAAA,CAAA,CAJA,CAMA;;AACA,WAAA,KAAA,CAAA,WAAA,EAAA,CAAA,KAAA,QAAA,EAAA,IAAA,CAAA,CAAA,CAAA,EAAA,IAAA,CAAA,CAAA,CAAA,CAAA;AACA;AATA;AAnFA,CAAA","sourcesContent":["<template>\n    <div class=\"wrap\">\n      <h1>Thing Explainer Chat</h1>\n      <h3>Chatting, but with Simpler Words</h3>\n      <br/>\n      <p>Enter your (simple) username</p>\n      <div class=\"username-input\">\n        <span class=\"input-append\">@</span>\n        <input \n          class=\"simpleInput\" \n          type=\"text\" \n          maxlength=\"42\"\n          v-model=\"username\"\n          @keydown=\"checkSimpleInput\"\n          :disabled=\"disableInput\" />\n        </div>\n      <button \n        class=\"goBtn\" \n        @click=\"checkUsername\"\n        :disabled=\"disableInput\"\n        v-show=\"viewGoButton\">\n        GO\n      </button>\n      <div v-show=\"!viewGoButton\">\n        <div class=\"loader\"></div>\n        <p>You are now being paired with a random chatter</p>\n      </div>\n      <p>{{ errorMessage }}</p>\n    </div>\n</template>\n<script>\n\nexport default {\n  name: 'Start',\n  props: ['socketId', 'pairSocketId'],\n  data() {\n    return {\n      disableInput: false,  // Used the disable the input when starting\n      viewGoButton: true,   // Controls the view of the 'Go' button\n      username: '',\n      errorMessage: '',\n      // socketId: this.socketId,\n      // Bad words...\n      badWordList: ['ass', 'damn', 'shit', 'fuck', 'bastard', 'cunt', 'hell', 'bitch'],\n    }\n  },\n  created() {\n\n\t\t// this.adjustEditorWindow();\n\t\t// window.onresize = this.adjustEditorWindow;\n\n\t},\n  watch: {\n    socketId: function(val) {\n\t\t\tthis.socketId = val;\n    },\n    pairSocketId: function(val) {\n      this.pairSocketId = val;\n    }\n  },\n  methods: {\n\n    // Checks to see if the input is ready to move on to the next stage\n    checkSimpleInput: function(e) {\n    \n      if (e.key === 'Enter') {\n        this.checkUsername();\n      }\n\n      // Make sure that the input is alpha numeric with only dashes and underscores\n      let regex = /[A-Za-z0-9_-]/g;\n      if (!regex.test(e.key)) {\n        e.preventDefault();\n      }\n    },\n\n    checkBadWord: function(wurd) {\n      let word = wurd.toLowerCase();\n      for (let badWord in this.badWordList) {\n        if (word.indexOf(this.badWordList[badWord]) >= 0) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n    // Makes sure the username is not a copy and is valid to start the app\n    checkUsername: function(e) {\n      if (this.username) {\n\n        if (this.checkBadWord(this.username)) {\n          this.setErrorMessage('Please, have some class.');\n          return;\n        }\n\n        this.disableInput = true;\n        this.viewGoButton = false;\n\n        // Send a connection request to the server\n        this.$socket.emit('getChatPartner', this.username);\n\n        } else {\n            e.target.blur();\n        }\n    },\n\n    setErrorMessage: function(msg) {\n      this.errorMessage = msg;\n      setTimeout(() => {\n        this.disableInput = false;\n        this.errorMessage = '';\n      }, 4000);\n    }\n\n  },\n  sockets: {\n    chatterFound: function(info) {\n      this.viewGoButton = true;\n      this.disableInput = false;\n\n      this.pairSocketId = info[0];\n\n      // Starts the application if the username is good\n      this.$emit('startChat', [this.username, info[0], info[1]]);\n    }\n  }\n}\n</script>\n<style>\n\n.wrap {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  margin-top: 12%;\n  font-family: system-ui;\n}\n\ntextarea input {\n  border:none;\n  background-image:none;\n  background-color:transparent;\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n  resize: none;\n}\n\ntextarea:focus, input:focus{\n  outline: none;\n}\n\n.simpleInput {\n  text-align: center;\n  transition: 0.2s;\n  width: 400px;\n  font-size: 20px;\n  padding: 10px;\n  border: solid #cccccc;\n  border-radius: 10px;\n  /* border-top-right-radius: 10px;\n  border-bottom-right-radius: 10px; */\n}\n\n.username-input {\n  display: inline;\n}\n\n.input-append {\n  background: #e3e3e3;\n  border: solid #cccccc;\n  border-top-left-radius: 10px;\n  border-bottom-left-radius: 10px;\n  width: 2em;\n  font-size: 20px;\n  padding: 10px;\n  display: none;\n}\n\n.goBtn {\n  color: white;\n  background: #42b883;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  margin-top: 1em;\n  font-size: 1.3em;\n  width: 4em;\n  height: 1.5em;\n}\n\n.goBtn:active,\n.goBtn:focus,\n.goBtn:focus:active {\n  background-image: none;\n  outline: 0;\n  box-shadow: none;\n  background: #44d493;\n}\n\n.loader {\n  margin: 1em auto;\n  border: 8px solid #f3f3f3; \n  border-top: 8px solid #44d493;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  animation: spin 2s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n</style>"],"sourceRoot":"src/components/simpleChat"}]}