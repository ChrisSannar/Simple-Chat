{"remainingRequest":"/Users/chris/Desktop/thingexplainerchat/node_modules/thread-loader/dist/cjs.js!/Users/chris/Desktop/thingexplainerchat/node_modules/babel-loader/lib/index.js!/Users/chris/Desktop/thingexplainerchat/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chris/Desktop/thingexplainerchat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chris/Desktop/thingexplainerchat/src/components/simpleChat/ChatInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chris/Desktop/thingexplainerchat/src/components/simpleChat/ChatInput.vue","mtime":1569118100815},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chris/Desktop/thingexplainerchat/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport fromWords from \"../../assets/words.js\";\nexport default {\n  data: function data() {\n    return {\n      text: \"\",\n      valid: true,\n      simpleWords: {},\n      invalidWordList: \"\",\n      invalidWords: {},\n      showInvalid: false,\n      timeout: null\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    var temp = fromWords.words.split('|');\n    temp.forEach(function (word) {\n      _this.simpleWords[\"\".concat(word)] = true;\n    });\n    this.timeout = setTimeout(function () {}, 0);\n  },\n  methods: {\n    // Make sure the input is proper\n    validateInput: function validateInput(e) {\n      var _this2 = this;\n\n      // handle if we're submitting\n      if (e.key == \"Enter\") {\n        e.preventDefault();\n\n        if (this.valid) {\n          this.submitText(this.text);\n          this.text = \"\";\n        } else {\n          var box = document.querySelector(\".simpleInput\");\n          box.classList.add(\"badInput\");\n          setTimeout(function () {\n            box.classList.remove(\"badInput\");\n          }, 400);\n        }\n      } //G et the input and process it\n\n\n      var simpleInput = this.text.split(\" \");\n      this.valid = true;\n      this.showInvalid = false;\n      this.invalidWords = {};\n      clearTimeout(this.timeout);\n      simpleInput.forEach(function (word) {\n        var strippedWord = word.replace(/[.,/#!?$%^&*;:{}=\\-_`~()]/g, \"\");\n\n        if (_this2.simpleWords[\"\".concat(strippedWord.toLowerCase())] == true) {// do nothing... this just works here.\n        } else if (strippedWord != \"\") {\n          _this2.valid = false;\n          _this2.invalidWords[\"\".concat(strippedWord)] = true;\n        }\n\n        if (_this2.invalidWords && Object.keys(_this2.invalidWords).length > 0) {\n          _this2.valid = false;\n          _this2.timeout = setTimeout(function () {\n            _this2.showInvalid = true;\n\n            _this2.setInvalidWords(Object.keys(_this2.invalidWords));\n          }, 400);\n        }\n      });\n    },\n    // Gathers the words together that are failures\n    setInvalidWords: function setInvalidWords(words) {\n      this.invalidWordList = \"\";\n\n      for (var i = 0; i < words.length - 1; i++) {\n        this.invalidWordList += words[i] + \", \";\n      }\n\n      this.invalidWordList += words[words.length - 1];\n    },\n    // Send the text to the chat body.\n    submitText: function submitText(text) {\n      if (text && text.length > 0) {\n        this.$emit('submitMessage', text);\n      } else {\n        var box = document.querySelector(\".simpleInput\");\n        box.classList.add(\"badInput\");\n        setTimeout(function () {\n          box.classList.remove(\"badInput\");\n        }, 400);\n      }\n    }\n  }\n};",{"version":3,"sources":["ChatInput.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"chatInputWrap\">\n        <input\n            class=\"simpleInput\" \n            type=\"text\"\n            v-model=\"text\"\n            @keyup=\"validateInput\">\n        <br>\n        <p \n            v-if=\"showInvalid && invalidWordList\"\n            class=\"invalidWords\">\n            Invalid Words: {{invalidWordList}}</p>\n    </div>\n</template>\n\n<script>\nimport fromWords from '../../assets/words.js';\n\nexport default {\n    data() {\n        return {\n            text: \"\",\n            valid: true,\n            simpleWords: {},\n            invalidWordList: \"\",\n            invalidWords: {},\n            showInvalid: false,\n            timeout: null\n        }\n    },\n    created: function () {\n        let temp = fromWords.words.split('|');\n        temp.forEach(word => {\n            this.simpleWords[`${word}`] = true;\n        });\n        this.timeout = setTimeout(() => {}, 0);\n    },\n    methods: {\n\n        // Make sure the input is proper\n        validateInput: function(e) {\n            // handle if we're submitting\n            if (e.key == \"Enter\") {\n                e.preventDefault();\n                if (this.valid) {\n                    this.submitText(this.text);\n                    this.text = \"\";\n                } else {\n                    let box = document.querySelector(\".simpleInput\");\n                    box.classList.add(\"badInput\");\n                    setTimeout(() => {\n                        box.classList.remove(\"badInput\");\n                    }, 400);\n                }\n            }\n\n            //G et the input and process it\n            let simpleInput = this.text.split(\" \");\n            this.valid = true;\n            this.showInvalid = false;\n            this.invalidWords = {};\n            clearTimeout(this.timeout);\n            simpleInput.forEach(word => {\n                let strippedWord = word.replace(/[.,/#!?$%^&*;:{}=\\-_`~()]/g,\"\");\n                if (this.simpleWords[`${strippedWord.toLowerCase()}`] == true) {\n                    // do nothing... this just works here.\n                } else if (strippedWord != \"\") {\n                    this.valid = false;\n                    this.invalidWords[`${strippedWord}`] = true;\n                }\n                if (this.invalidWords && Object.keys(this.invalidWords).length > 0) {\n                    this.valid = false;\n                    this.timeout = setTimeout(() => {\n                        this.showInvalid = true;\n                        this.setInvalidWords(Object.keys(this.invalidWords));\n                    }, 400);\n                }\n            })\n        },\n        // Gathers the words together that are failures\n        setInvalidWords: function(words) {\n            this.invalidWordList = \"\";\n            for (let i = 0; i < words.length - 1; i++) {\n                this.invalidWordList += words[i] + \", \";\n            }\n            this.invalidWordList += words[words.length - 1];\n        },\n        // Send the text to the chat body.\n        submitText: function(text) {\n            if (text && text.length > 0) {\n                this.$emit('submitMessage', text);\n            } else {\n                let box = document.querySelector(\".simpleInput\");\n                box.classList.add(\"badInput\");\n                setTimeout(() => {\n                    box.classList.remove(\"badInput\");\n                }, 400);\n            }\n        }\n        \n    }\n}\n</script>\n\n<style>\n    textarea input {\n        border:none;\n        background-image:none;\n        background-color:transparent;\n        -webkit-box-shadow: none;\n        -moz-box-shadow: none;\n        box-shadow: none;\n        resize: none;\n    }\n    textarea:focus, input:focus{\n        outline: none;\n    }\n    .simpleInput {\n        transition: 0.2s;\n        width: 100%;\n        font-size: 20px;\n        padding: 10px;\n        border: solid #cccccc;\n        border-radius: 10px;\n        text-align: left;\n        bottom: 2em;;\n    }\n    .invalidWords {\n        position: fixed;\n        bottom: 0;\n    }\n    .chatInputWrap {\n        /* width: 500px; */\n        width: 100%;\n        \n    }\n    .badInput {\n        border: solid #a00;\n    }\n</style>"],"sourceRoot":"src/components/simpleChat"}]}